<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode-有效的括号</title>
      <link href="/2019/07/26/leetcode-you-xiao-de-gua-hao/"/>
      <url>/2019/07/26/leetcode-you-xiao-de-gua-hao/</url>
      
        <content type="html"><![CDATA[<h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><p>给定一个只包括 <code>&#39;(&#39;，&#39;)&#39;</code>，<code>&#39;{&#39;，&#39;}&#39;</code>，<code>&#39;[&#39;，&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><pre><code>输入: &quot;()&quot;输出: true</code></pre><p>示例 2:</p><pre><code>输入: &quot;()[]{}&quot;输出: true</code></pre><p>示例 3:</p><pre><code>输入: &quot;(]&quot;输出: false</code></pre><p>示例 4:</p><pre><code>输入: &quot;([)]&quot;输出: false</code></pre><p>示例 5:</p><pre><code>输入: &quot;{[]}&quot;输出: true</code></pre><p>思路：<br>    必然偶数长度，转数字正负抵消到最后</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>length<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token string">'['</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token string">'{'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token string">']'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token string">'}'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">cut</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>ss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>ss<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">+</span>ss<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          ss<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token function">cut</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> ss<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-最长公共前缀</title>
      <link href="/2019/07/26/leetcode-zui-chang-gong-gong-qian-zhui/"/>
      <url>/2019/07/26/leetcode-zui-chang-gong-gong-qian-zhui/</url>
      
        <content type="html"><![CDATA[<h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p>示例 1:</p><pre><code>输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]输出: &quot;fl&quot;</code></pre><p>示例 2:</p><pre><code>输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]输出: &quot;&quot;解释: 输入不存在公共前缀。</code></pre><p>说明:</p><p>所有输入只包含小写字母 <code>a-z</code></p><p>思路：</p><pre><code>正则排除输入非 `a-z` 的情况。对输入排序减少首项长度。不确定循环次数，这里选择了while循环。</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string[]} strs * @return {string} */</span><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>  strs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token regex">/^[a-z]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">""</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> j<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>str <span class="token operator">+</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">}</span>      i<span class="token operator">++</span>      str <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-罗马数字转整数</title>
      <link href="/2019/07/26/leetcode-luo-ma-shu-zi-zhuan-zheng-shu/"/>
      <url>/2019/07/26/leetcode-luo-ma-shu-zi-zhuan-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><pre><code>字符          数值I             1V             5X             10L             50C             100D             500M             1000</code></pre><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</li></ul><p>示例 1:</p><pre><code>输入: &quot;III&quot;输出: 3</code></pre><p>示例 2:</p><pre><code>输入: &quot;IV&quot;输出: 4</code></pre><p>示例 3:</p><pre><code>输入: &quot;IX&quot;输出: 9</code></pre><p>示例 4:</p><pre><code>输入: &quot;LVIII&quot;输出: 58解释: L = 50, V= 5, III = 3.</code></pre><p>示例 5:</p><pre><code>输入: &quot;MCMXCIV&quot;输出: 1994解释: M = 1000, CM = 900, XC = 90, IV = 4.</code></pre><p>思路：</p><pre><code>通过正则替换字母为对应的数字，字符串转换为数组遍历计算出结果</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> rm <span class="token operator">=</span> <span class="token punctuation">{</span>    IV<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    IX<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>    XL<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    XC<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>    CD<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>    CM<span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">,</span>    I<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    V<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    X<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    L<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    C<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    D<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    M<span class="token punctuation">:</span> <span class="token number">1000</span>  <span class="token punctuation">}</span>   <span class="token keyword">var</span> ss <span class="token operator">=</span> s  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>rm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ss <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> ss<span class="token punctuation">.</span>length <span class="token operator">></span><span class="token number">1</span> <span class="token operator">?</span> ss<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> ss<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    res <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-无重复字符的最长子串</title>
      <link href="/2019/07/25/leetcode-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/"/>
      <url>/2019/07/25/leetcode-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><pre><code>输入: &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre><p>示例 2:</p><pre><code>输入: &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre><p>示例 3:</p><pre><code>输入: &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</code></pre><p>思路：<br>    数组切片遍历</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> lengthOfLongestSubstring <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> str2Arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> str2Arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">var</span> store <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> store<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>store<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                store<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>store<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> store<span class="token punctuation">.</span>length    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-两数相加</title>
      <link href="/2019/07/24/leetcode-liang-shu-xiang-jia/"/>
      <url>/2019/07/24/leetcode-liang-shu-xiang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：<br>    输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>    输出：7 -&gt; 0 -&gt; 8<br>    原因：342 + 465 = 807</p><p>思路：<br>    将入参先转数组，计算后再转回链表</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a1 <span class="token operator">=</span> <span class="token function">listNode2Array</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>    a2 <span class="token operator">=</span> <span class="token function">listNode2Array</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>    <span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        aa <span class="token operator">=</span> a1        a1 <span class="token operator">=</span> a2        a2 <span class="token operator">=</span> aa    <span class="token punctuation">}</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>a2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">:</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">array2ListNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表转数组</span><span class="token keyword">function</span> <span class="token function">listNode2Array</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> val <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">.</span>length <span class="token operator">?</span> val <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ListNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">listNode2Array</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">.</span>next<span class="token punctuation">,</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数组转链表</span><span class="token keyword">function</span> <span class="token function">array2ListNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> line <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span> line<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    line<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> line<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-两数之和</title>
      <link href="/2019/07/24/leetcode-liang-shu-zhi-he/"/>
      <url>/2019/07/24/leetcode-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<p>时间复杂度?空间复杂度?</p><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>给定一个整数数组 nums  和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例：</p><pre><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></pre><p>思路：</p><pre><code>实现一个方法，该方法包含两个参数，一个参数为长度大于2的整数数组，另一个为一个任意整数。该方法返回一个数组。</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} target * @return {number[]} */</span><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> targetItemIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">return</span> targetItemIndex<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>数组值为所传入数组中两项相加和为传入整数的下标。并且不能重复使用。</p><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><h4 id="双循环"><a href="#双循环" class="headerlink" title="双循环"></a>双循环</h4><p>遍历数组数组项相加之和等于目标值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> targetItemIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        targetItemIndex <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>        <span class="token keyword">break</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> targetItemIndex<span class="token punctuation">}</span></code></pre><h4 id="暴力相减"><a href="#暴力相减" class="headerlink" title="暴力相减"></a>暴力相减</h4><p>遍历数组目标值与遍历项相减之差存在于数组中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> targetItemIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetItemIndex <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>          <span class="token keyword">break</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> targetItemIndex<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>执行用时？内存消耗？</p><p>看了下题解，尝试了map，发现速度确实快了。map在日常工作中用的很少，</p><h3 id="方法二：两遍哈希表"><a href="#方法二：两遍哈希表" class="headerlink" title="方法二：两遍哈希表"></a>方法二：两遍哈希表</h3><p>为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。<br>通过以空间换取速度的方式，我们可以将查找时间从 O(n) 降低到 O(1)。哈希表正是为此目的而构建的，它支持以 近似 恒定的时间进行快速查找。我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到 O(n)。但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为 O(1)。</p><p>一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target - nums[i]）是否存在于表中。注意，该目标元素不能是 nums[i] 本身！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> targetItemIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> i<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      targetItemInde <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token keyword">return</span> targetItemInde    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="方法三：一遍哈希表"><a href="#方法三：一遍哈希表" class="headerlink" title="方法三：一遍哈希表"></a>方法三：一遍哈希表</h3><p>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> targetItemIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      targetItemInde <span class="token operator">=</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>      <span class="token keyword">return</span> targetItemInde    <span class="token punctuation">}</span>    map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre><code> for for-in forEach Map</code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100-Days-005</title>
      <link href="/2019/07/23/python-100-days-005/"/>
      <url>/2019/07/23/python-100-days-005/</url>
      
        <content type="html"><![CDATA[<h2 id="构造程序逻辑"><a href="#构造程序逻辑" class="headerlink" title="构造程序逻辑"></a>构造程序逻辑</h2><p>分支和循环结构会帮助我们将程序中逻辑建立起来，将来我们的程序无论简单复杂，都是由顺序结构、分支结构、循环结构构成的。对于编程语言的初学者来说，首先要锻炼的是将人类自然语言描述的解决问题的步骤和方法翻译成代码的能力，其次就是熟练的运用之前学过的运算符、表达式以及最近的两个章节讲解的分支结构和循环结构的知识。有了这些基本的能力才能够通过计算机程序去解决各种各样的现实问题。所以，开始做练习吧！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-100-Days </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100-Days-004</title>
      <link href="/2019/07/23/python-100-days-004/"/>
      <url>/2019/07/23/python-100-days-004/</url>
      
        <content type="html"><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>区别于顺序结构，循环结构也是一段特殊的代码块</p><h3 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h3><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用for-in循环</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用while循环。while循环通过一个能够产生或转换出bool值的表达式来控制循环，表达式的值为True循环继续，表达式的值为False循环结束。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-100-Days </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100-Days-003</title>
      <link href="/2019/07/23/python-100-days-003/"/>
      <url>/2019/07/23/python-100-days-003/</url>
      
        <content type="html"><![CDATA[<h2 id="分支结构（选择结构）"><a href="#分支结构（选择结构）" class="headerlink" title="分支结构（选择结构）"></a>分支结构（选择结构）</h2><p>区别于顺序结构逐行执行。</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>与 js 不同的是Python 没有花括号 <code>{}</code> 去包裹代码片段 <code>if elif else</code> 但是会多个 <code>:</code>。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""分段函数求值        3x - 5  (x > 1)f(x) =  x + 2   (-1 &lt;= x &lt;= 1)        5x + 3  (x &lt; -1)Version: 0.1Author: 骆昊"""</span>x <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'x = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">5</span><span class="token keyword">elif</span> x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">else</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f(%.2f) = %.2f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>关于嵌套的分支结构 <strong><em>Flat is better than nested.</em></strong> 提倡代码“扁平化”是因为嵌套结构的嵌套层次多了之后会严重的影响代码的可读性</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-100-Days </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100-Days-002</title>
      <link href="/2019/07/22/python-100-days-002/"/>
      <url>/2019/07/22/python-100-days-002/</url>
      
        <content type="html"><![CDATA[<p>半路出家往往都没有牢固的根基。尝试过很多次也没有读下去各种计算机基础的数据。就好像你发现了新大陆，但是没有找到合适的地方登陆。语言元素？</p><h2 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h2><h3 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h3><p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，<strong>运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。</strong>今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于“冯·诺依曼结构”的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。</p><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li><p>整型：Python中可以处理任意大小的整数（Python 2.x中有int(?)和long(?)两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如0b100，换算成十进制是4）、八进制（如0o100，换算成十进制是64）、十进制（100）和十六进制（0x100，换算成十进制是256）的表示法。</p></li><li><p>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如123.456）之外还支持科学计数法（如1.23456e2）。</p></li><li><p>字符串型：字符串是以单引号或双引号括起来的任意文本，比如’hello’和”hello”,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</p></li><li><p>布尔型：布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如3 &lt; 5会产生布尔值True，而2 == 1会产生布尔值False）。</p></li><li><p>复数型：形如3+5j，跟数学上的复数表示一样，唯一不同的是虚部的i换成了j。</p></li></ul><p>还是比较 nodejs，这里的复数型并不是nodejs的数据类型。 number 包含了整型与浮点。<br>布尔 nodejs 是全小写的 true、false<br>字符串书写成多行的形式也比 nodejs 需要换行符的表示6了不少</p><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>每种语言的变量命名都有自己的命名规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的a和小写的A是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>这里的硬性规则和很多语言类似，而且必须遵循。另一个规则，更好的语义化也很重要</p><p>python作为动态语言也可以像js一样改变变量的数据类型。显式（隐式）的改变。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符<br>|运算符|描述|<br>|—–|—|<br>|[] [:]|下标，切片|<br>|<em>*|指数|<br>|~ + -|按位取反, 正负号|<br>|</em> / % //|乘，除，模，整除|<br>|+ -|加，减|<br>|&gt;&gt; &lt;&lt;|右移，左移|<br>|&amp;|按位与|<br>|^ ||按位异或，按位或|<br>|&lt;= &lt; &gt; &gt;=|小于等于，小于，大于，大于等于|<br>|== !=|等于，不等于|<br>|is is not|身份运算符|<br>|in not in|成员运算符|<br>|not or and|逻辑运算符|<br>|= += -= <em>= /= %= //= *</em>= &amp;= `| = ^= &gt;&gt;= &lt;&lt;=`|</p><p>这一节的几个练习需要了解基本的语法。</p><h3 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h3><p>这一节主要是了解变量与运算符</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-100-Days </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100-Days-001</title>
      <link href="/2019/07/22/python-100-days-001/"/>
      <url>/2019/07/22/python-100-days-001/</url>
      
        <content type="html"><![CDATA[<p>在学习编程的路上，有很多优秀的语言值得学习。本文来自骆老师的 <a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python-100-Days</a>。python本身有很棒的文档。但一个好的学习指南可以提供更好的学习体验。</p><h2 id="初识-Python"><a href="#初识-Python" class="headerlink" title="初识 Python"></a>初识 Python</h2><p>大概是16年的样子，第一次听说了python，17年工作中接触了python,18年的时候想学python了，19年决定通过python转后端。<br>第一次见识到python厉害是前端工作中，想自动识别异形验证码，这里见识到了机器学习确实很有意思。公司的运维也基本是python了。这里的python是python3。</p><p>上周我简单看了下python的文档，了解了个大概。也在我的机器上安装了环境，但是对应虚拟机的部分。不是很明白这个设计。所以没有安装。<br>简单的比较了下 nodejs 与 python 的语法。同样的动态类型，让我觉得他很亲切。模版的使用让我感觉这个模块比nodejs好用。我不用考虑什么导出。python会自动帮我做这些工作。<br>还有很棒的一点，交互式的编程工具。如果你习惯用 Terminal 安装、执行或者其他有意思的事。最重要的，你不需要在学语法的时候非要安装一个开发工具，python已经安装好了自带的集成开发工具。</p><h3 id="怎么装"><a href="#怎么装" class="headerlink" title="怎么装"></a>怎么装</h3><p>macOS自带了Python 2.x版本，可以通过Python的官方网站提供的安装文件（pkg文件）安装Python 3.x的版本。默认安装完成后，可以通过在终端执行python命令来启动2.x版本的Python解释器，可以通过执行python3命令来启动3.x版本的Python解释器。</p><pre class=" language-bash"><code class="language-bash">python --version <span class="token comment" spellcheck="true"># Python 2.7.10</span>brew <span class="token function">install</span> python3python3 --version<span class="token comment" spellcheck="true"># Python 3.7.3</span></code></pre><p>mac安装起来还是很方便。语法部分和 IPython 用什么学什么。</p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>这里我没有用其他工具，直接在终端召唤自带的交互式工具用用</p><pre class=" language-bash"><code class="language-bash">python3<span class="token comment" spellcheck="true"># Python 3.7.3 (default, Jun 19 2019, 07:38:49) </span><span class="token comment" spellcheck="true"># [Clang 10.0.1 (clang-1001.0.46.4)] on darwin</span><span class="token comment" spellcheck="true"># Type "help", "copyright", "credits" or "license" for more information.</span></code></pre><p>召唤出来后试试练习</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> this<span class="token comment" spellcheck="true"># The Zen of Python, by Tim Peters</span><span class="token comment" spellcheck="true"># Beautiful is better than ugly.</span><span class="token comment" spellcheck="true"># Explicit is better than implicit.</span><span class="token comment" spellcheck="true"># Simple is better than complex.</span><span class="token comment" spellcheck="true"># Complex is better than complicated.</span><span class="token comment" spellcheck="true"># Flat is better than nested.</span><span class="token comment" spellcheck="true"># Sparse is better than dense.</span><span class="token comment" spellcheck="true"># Readability counts.</span><span class="token comment" spellcheck="true"># Special cases aren't special enough to break the rules.</span><span class="token comment" spellcheck="true"># Although practicality beats purity.</span><span class="token comment" spellcheck="true"># Errors should never pass silently.</span><span class="token comment" spellcheck="true"># Unless explicitly silenced.</span><span class="token comment" spellcheck="true"># In the face of ambiguity, refuse the temptation to guess.</span><span class="token comment" spellcheck="true"># There should be one-- and preferably only one --obvious way to do it.</span><span class="token comment" spellcheck="true"># Although that way may not be obvious at first unless you're Dutch.</span><span class="token comment" spellcheck="true"># Now is better than never.</span><span class="token comment" spellcheck="true"># Although never is often better than *right* now.</span><span class="token comment" spellcheck="true"># If the implementation is hard to explain, it's a bad idea.</span><span class="token comment" spellcheck="true"># If the implementation is easy to explain, it may be a good idea.</span><span class="token comment" spellcheck="true"># Namespaces are one honking great idea -- let's do more of those!</span></code></pre><p>很有意思的一段诗</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> turtleturtle.pensize<span class="token punctuation">(</span>4<span class="token punctuation">)</span>turtle.pencolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>turtle.forward<span class="token punctuation">(</span>100<span class="token punctuation">)</span>turtle.right<span class="token punctuation">(</span>90<span class="token punctuation">)</span>turtle.forward<span class="token punctuation">(</span>100<span class="token punctuation">)</span>turtle.right<span class="token punctuation">(</span>90<span class="token punctuation">)</span>turtle.forward<span class="token punctuation">(</span>100<span class="token punctuation">)</span>turtle.right<span class="token punctuation">(</span>90<span class="token punctuation">)</span>turtle.forward<span class="token punctuation">(</span>100<span class="token punctuation">)</span>turtle.mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>画个正方形<br><img src="/images/Python-100-Days/turtle.png" alt></p><p>这些玩具给我的体验是什么。新奇，有趣。这里我跳过了 PyCharm 的学习，是因为我在浏览 Python 文档的时候，已经做了这些工作，我的第一个demo也是在这个工具中写的。<br>但是，对于基础学习而言。我觉得，最快的体验就是如何安装，如何用</p><h3 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h3><p>第一节，就是快速的安装环境，并在自己的机器上玩一下这个语言（turtle 内置模块）<br><a href="https://docs.python.org/zh-cn" target="_blank" rel="noopener">python3</a><br><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">python3-cookbook</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-100-Days </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社会工程学浅析</title>
      <link href="/2019/07/10/she-hui-gong-cheng-xue-qian-xi/"/>
      <url>/2019/07/10/she-hui-gong-cheng-xue-qian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="传奇黑客"><a href="#传奇黑客" class="headerlink" title="传奇黑客"></a>传奇黑客</h2><p><a href="https://en.wikipedia.org/wiki/Kevin_Mitnick" target="_blank" rel="noopener">凯文·米特尼克</a></p><h2 id="概述简介"><a href="#概述简介" class="headerlink" title="概述简介"></a>概述简介</h2><ul><li>狭义工程学：依赖网络、目标往往不很明确、不需要了解其他行业信息</li><li>广义工程学：目标明确、有针对性的计划、不仅仅依赖网络、了解行业术语</li></ul><p>工程学与黑客技术的区别，前者更多的是针对人的入侵</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>社会工程学是一种通过对受害者心理弱点、本能反应、好奇心、信任、贪婪等心理陷阱进行诸如欺骗等手段取得利益的手法。</p><p>社会工程学是一种黑客攻击方法，利用欺骗等手段骗取对方信任，获取机密 情报。国内的社会工程学通常和人肉搜索进行联系起来，但实际上人肉搜索 并不等于社会工程学</p><p>社会工程学需要搜集大量的信息针对对方的实际情况，进行心理战术的一种手法。</p><p>社会工程学定位在计算机信息安全工作链路的一个最脆弱的环节上——人。</p><p>总体上来说，社会工程学就是使人们顺从你的意愿、满足你的欲望的一门艺术 与学问。</p><h2 id="社工手段"><a href="#社工手段" class="headerlink" title="社工手段"></a>社工手段</h2><p><code>Google hacking</code>、<code>QQ</code>、<code>SNS</code>、<code>微博、博客</code>、<code>邮箱</code>、<code>域名查询</code>、<code>电商</code>、<code>交友网站</code>、<code>身份证信息</code>、<code>社工库</code>、<code>密码破解</code>、<a href="https://haveibeenpwned.com/" target="_blank" rel="noopener">haveibeenpwned</a></p><h3 id="广义社会工程学"><a href="#广义社会工程学" class="headerlink" title="广义社会工程学"></a>广义社会工程学</h3><p>利用人的心理弱点(如人的本能反应、好奇心、信任、贪婪)、规章制度的漏 洞进行诸如欺骗、伤害等手段，以期获得所需的信息(如计算机口令、银行账 户信息等) 。</p><h3 id="社会工程学特点"><a href="#社会工程学特点" class="headerlink" title="社会工程学特点"></a>社会工程学特点</h3><p>社会工程攻击是使人们顺从你的意愿、满足你的欲望的一门艺术与学问，是一种 利用人性脆弱点,贪婪等等的心理表现进行攻击。</p><ul><li>利用信息安全防护链条中最薄弱的环节;</li><li>通常以交谈、欺骗、假冒或口语等方式，从合法用户中套取用户系统的秘密;</li><li>熟练的社会工程师都是擅长进行信息收集的身体力行者，是一个很好的说客;</li><li>不能掌握人们在非正常意识以外的行为;</li><li>风险和影响很高，这些攻击难以跟踪和识别。</li></ul><h3 id="常用手段"><a href="#常用手段" class="headerlink" title="常用手段"></a>常用手段</h3><p>十度分割法 攻击者首先接触的群体，和其最终目标可能隔着十层之远;常用的技巧就是伪装友好。<br>学会说行话 研究行业术语，接触时以“专业化”的谈吐博得被骗者的好感。<br>借用等待时间 收集目标对象的各种轶事， 及其它“ 社交线索”以建 立信任感，这不过是又一 种心理暗示。<br>利用坏消息 利用坏消息来发送社会工 程学式的垃圾邮件、网络 钓鱼或其它类型的邮件。<br>滥用网民信任 利用网民对非常受欢迎的 社交网站的信任，发送仿 冒请求，实施钓鱼欺诈。<br>电话号码诈骗 利用电话号码欺诈术，在目标被叫者的来电显示屏上显示一个和主叫号码不一样的号码</p><h3 id="社会学、关系学"><a href="#社会学、关系学" class="headerlink" title="社会学、关系学"></a>社会学、关系学</h3><h3 id="人性的弱点"><a href="#人性的弱点" class="headerlink" title="人性的弱点"></a>人性的弱点</h3><p>虚荣心的利用<br> • 每个人都喜欢被赞扬具有很高的才智<br> • 装扮成虔诚的听众<br> • 你自负，且一直自认为怀才不遇吗?<br>同情心的滥用<br> • 建立信任，绕开必要的手续和验证机制<br> • 任务的紧迫度是一个很重要的因素<br> • 是否确定你给陌生人的帮助，没有给公司带来过困扰?<br>基于胁迫的请求<br> • 职位的胁迫<br> • 社会关系的胁迫<br> • 你敢于抵制不合理的请求吗?</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>utopia-swagger</title>
      <link href="/2019/07/09/utopia-swagger/"/>
      <url>/2019/07/09/utopia-swagger/</url>
      
        <content type="html"><![CDATA[<p><a href="https://marketplace.visualstudio.com/items?itemName=zhuxiaopeng.utopia-swagger" target="_blank" rel="noopener">utopia-swagger</a>: nodejs swagger helper</p>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iRobotjs</title>
      <link href="/2019/07/09/irobotjs/"/>
      <url>/2019/07/09/irobotjs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/OrangeBorning/iRobotjs" target="_blank" rel="noopener">iRobotjs</a>: 企业微信群机器人js</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
          <category> js </category>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iRobotPy</title>
      <link href="/2019/07/09/irobotpy/"/>
      <url>/2019/07/09/irobotpy/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/OrangeBorning/iRobotPy" target="_blank" rel="noopener">iRobotPy</a>: 企业微信群机器人python</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-bridge</title>
      <link href="/2019/07/09/javascript-bridge/"/>
      <url>/2019/07/09/javascript-bridge/</url>
      
        <content type="html"><![CDATA[<p><a href="http://zhuxiaopeng.top/jsBridge" target="_blank" rel="noopener">javascript-bridge</a>: H5和客户端之间使用到的桥接封装</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML转PDF</title>
      <link href="/2019/07/09/html-zhuan-pdf/"/>
      <url>/2019/07/09/html-zhuan-pdf/</url>
      
        <content type="html"><![CDATA[<p>因为工作中涉及到了 html 转 pdf的需求，目前接触过的转换方式有 nodejs,java以及通过浏览器唤起系统打印。</p><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>这里使用到了 pupeteer, 通过无头浏览器提供的api生成pdf，png等。这个方法就目前来说是效果很好的。相比起接触到到java转，因为对java的实现不了解，这里不做展开。pupeteer 实际上也是浏览器，可以理解为可以运行在服务端的浏览器。</p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>通过<code>ctrl + p</code> 或者 <code>command + p</code> 唤起打印，这里可以控制是否展示图片，是否需要页头页脚。</p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo:基于nodejs的博客框架</title>
      <link href="/2019/07/08/hexo-ji-yu-nodejs-de-bo-ke-kuang-jia/"/>
      <url>/2019/07/08/hexo-ji-yu-nodejs-de-bo-ke-kuang-jia/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个基于nodejs的博客框架，快速简洁高效，是他的特点。本文主要是我在安装使用部分的体验，官网 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo.io</a> 有完整的文档可以使用。相比与2017刚刚接触的时候，体验顺畅了很多。总结起来，为什么又新开了一个博客，又开始使用hexo,主要还是想把从事前端的这三年做一些总结和梳理，使用hexo就是因为他够简单快速。</p><p>这个博客是依托在GitHub上的。目前访问的链接也是gitpage</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>git 是软件工程师必备的的技能之一。关于git的介绍这里不在赘述。以下内容基于你有一定的技术能力储备（git、node等）。<br>当你依照官网的步骤在本地运行起 <code>hexo server</code> 也许你看到的是以下内容。对了，我这里都有以mac平台为基础。</p><pre class=" language-bash"><code class="language-bash">~/github/hexoblog » yarn dev                                                                                             zhuxiaopeng@zhuxiaopengdeMacBook-Proyarn run v1.5.1warning <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/package.json: No license field$ hexo g <span class="token operator">&amp;&amp;</span> hexo serverINFO  Start processingINFO  Files loaded <span class="token keyword">in</span> 274 msINFO  Generated: 2019/07/08/Hexo-基于nodejs的博客框架/index.htmlINFO  Generated: index.htmlINFO  2 files generated <span class="token keyword">in</span> 592 msINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token keyword">.</span> Press Ctrl+C to stop.</code></pre><p>这里你看到的 <code>yarn dev</code> 是我在package.json中写了以下内容</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"hexo g &amp;&amp; hexo server"</span><span class="token punctuation">,</span>    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo clean &amp;&amp; hexo deploy"</span><span class="token punctuation">}</span></code></pre><p>yarn 类似于npm 这里也不展开。你可以使用npm。我注意执行 <code>hexo init</code> 之后，hexo 会使用yarn安装默认的依赖。并在项目目录中生成yarn.lock文件。</p><p>根目录下 _config.yml 是对生成静态文件的一个配置文件。yml 语法可以自行了解。</p><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://orangeborning.github.io/ # 网址root: / # 网站根目录permalink: :year/:month/:day/:title/ # 文章的 永久链接 格式permalink_defaults: # 永久链接中各部分的默认值    # Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: https://github.com/OrangeBorning/OrangeBorning.github.io.git #库（Repository）地址  branch: master #publ分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。ished  # message: [message] 自定义提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})</code></pre><p>这里要注意将 deploy 部分换成你的github仓库地址。URL部分，根目录建议使用默认的。</p><p>使用官网文档可以很顺畅的完成这里的操作。</p><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><p>官方默认给你安装了一个主题，主题在 <code>/themes</code> 下，如果你和我一样不喜欢他的样子，你可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题市场</a>里找找看有没有喜欢的。当然你也可以自己写一个主题。<br>安装一个新的 theme 你可以在市场找到合适的后，点击你喜欢的主题的名称前往他的 github 地址。在你的项目根目录下运行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/kinggozhang/hexo-theme-ace.git themes/ace</code></pre><p>这样就会安装你需要的主题。</p><pre class=" language-yml"><code class="language-yml"># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: ace # landscape # 当前主题名称。值为false时禁用主题</code></pre><p>修改配置文件下的 theme 字段内容为你安装到 <code>/themes/</code> 下到目录名</p><p>不同的主题下作者有提供自定义的配置，你可以在主题下找到另一个 <code>_config.yml</code> 这个配置详情看对应主题的文档</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>使用自己的域名需要你首先得有一个域名，具体购买配置可以自行搜索。然后通过CNAME将域名映射到你的gitpage</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
